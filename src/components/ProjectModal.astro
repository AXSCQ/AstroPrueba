---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<dialog id={id} class="modal bg-transparent">
  <div
    class="fixed inset-0 bg-cyber-950/80 backdrop-blur-sm z-50 flex items-center justify-center p-2 sm:p-4"
  >
    <div
      class="bg-cyber-800 border border-neon-blue/20 rounded-lg w-full max-w-2xl relative overflow-hidden shadow-xl shadow-neon-blue/10 max-h-[95vh] md:max-h-[90vh] overflow-y-auto"
    >
      <!-- Efecto de brillo en las esquinas -->
      <div
        class="absolute -top-10 -left-10 w-20 h-20 bg-neon-blue/20 blur-xl hidden sm:block"
      >
      </div>
      <div
        class="absolute -bottom-10 -right-10 w-20 h-20 bg-neon-purple/20 blur-xl hidden sm:block"
      >
      </div>

      <!-- Header del modal -->
      <div
        class="flex flex-col items-center justify-center p-3 sm:p-4 sticky top-0 z-10 bg-cyber-950"
      >
        <div
          class="bg-neon-blue/90 rounded-lg shadow-[0_0_20px_rgba(0,200,255,0.3)] px-6 py-2"
        >
          <h3 class="text-lg sm:text-xl font-bold text-cyber-950">
            <slot name="title" />
          </h3>
        </div>
        <button
          onclick="closeModal(this)"
          class="absolute right-3 top-3 text-white/70 hover:text-white transition-colors p-1 rounded-full bg-cyber-800/50 hover:bg-cyber-800/70 shadow-lg shadow-black/10 min-w-8 min-h-8 flex items-center justify-center touch-manipulation"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            style="filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.5));"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Contenido -->
      <div class="p-3 sm:p-6 bg-cyber-800/95">
        <slot />
      </div>

      <!-- Footer con tecnologías -->
      <div class="border-t border-neon-blue/10 p-3 sm:p-4 bg-cyber-900/50">
        <slot name="technologies" />
      </div>
    </div>
  </div>
</dialog>

<script define:vars={{ id }}>
  // Función para cerrar el modal
  function closeModal(button) {
    const modal = button.closest("dialog");
    if (modal) {
      modal.close();
      document.body.classList.remove("overflow-hidden");
    }
  }

  // Exponer la función al ámbito global para el botón
  document.addEventListener("DOMContentLoaded", () => {
    // Asignar la función al botón específicamente
    const closeButton = document.querySelector(
      `#${id} button[onclick="closeModal(this)"]`,
    );
    if (closeButton) {
      closeButton.onclick = function () {
        closeModal(this);
        return false; // Prevenir cualquier acción predeterminada
      };
    }

    // Cerrar al hacer clic fuera o con ESC
    const modal = document.getElementById(id);
    if (modal) {
      // Cerrar al hacer clic fuera
      modal.addEventListener("click", (e) => {
        const dialogContent = modal.querySelector("div");
        if (dialogContent && !dialogContent.contains(e.target)) {
          modal.close();
          document.body.classList.remove("overflow-hidden");
        }
      });

      // Cerrar con ESC
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && modal.open) {
          modal.close();
          document.body.classList.remove("overflow-hidden");
        }
      });

      // Desplazarse al principio cuando se abre el modal
      modal.addEventListener("open", () => {
        setTimeout(() => {
          const modalContent = modal.querySelector(".bg-cyber-800");
          if (modalContent) modalContent.scrollTop = 0;
        }, 10);
      });
    }
  });
</script>

<style>
  .modal::backdrop {
    background: transparent;
  }

  /* Hacer que el modal sea más accesible en dispositivos móviles */
  @media (max-width: 640px) {
    dialog {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
    }

    .modal img {
      max-height: 40vh;
      object-fit: contain;
    }
  }

  :global(.prose) {
    color: white;
  }

  :global(.prose h1, .prose h2, .prose h3, .prose h4) {
    color: var(--color-neon-blue);
    font-weight: 600;
  }

  :global(.prose p) {
    color: white;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  :global(.prose ul) {
    list-style-type: none;
    padding-left: 0.5rem;
  }

  :global(.prose li) {
    color: white;
    margin-bottom: 0.5rem;
  }

  :global(.prose img) {
    border-radius: 0.5rem;
    margin-bottom: 1rem;
  }
</style>
