---

---

<div
    id="multitrack-overlay"
    class="fixed inset-0 bg-black opacity-0 z-40 pointer-events-none transition-opacity duration-1000"
>
</div>

<!-- Audio Player Accordion -->
<div
    id="audio-player-accordion"
    class="fixed bottom-4 right-4 z-50 bg-cyber-800/95 backdrop-blur-md rounded-lg border border-neon-blue/30 shadow-xl transition-all duration-300 ease-in-out"
    style="min-width: 280px; max-width: 420px;"
>
    <!-- Header del Acorde√≥n -->
    <button
        id="accordion-toggle"
        class="w-full p-4 flex items-center justify-between text-left hover:bg-neon-blue/10 rounded-t-lg transition-all duration-200"
        aria-expanded="false"
        aria-controls="accordion-content"
    >
        <div class="flex items-center gap-3">
            <div>
                <h3 class="text-sm font-medium text-white">Audio Visualizer</h3>
                <p class="text-xs text-neon-blue/70" id="audio-status">
                    Listo para reproducir
                </p>
            </div>
        </div>
        <div class="flex items-center gap-2">
            <svg
                id="chevron-icon"
                class="w-5 h-5 text-neon-blue transform transition-transform duration-200"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"></path>
            </svg>
        </div>
    </button>

    <!-- Contenido Colapsible -->
    <div
        id="accordion-content"
        class="overflow-hidden transition-all duration-300 ease-in-out"
        style="max-height: 0;"
        aria-hidden="true"
    >
        <div class="p-4 pt-0 space-y-4">
            <button
                id="play-button"
                class="p-3 rounded-full bg-neon-blue text-white hover:bg-neon-blue/80 transition-all duration-300 flex items-center justify-center shadow-lg shadow-neon-blue/30"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                >
                    <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>

            <div class="flex flex-col gap-1">
                <div
                    id="waveform-container"
                    class="w-48 h-12 bg-cyber-900/50 rounded border border-neon-blue/20"
                >
                </div>
                <div class="text-neon-blue text-xs text-center">
                    <span id="current-time">0:00</span> / <span id="total-time"
                        >0:00</span
                    >
                </div>
            </div>

            <div class="flex flex-col gap-1">
                <label class="text-neon-blue text-xs">Tracks:</label>
                <div class="flex gap-1">
                    <button
                        id="btn-bass"
                        class="track-btn px-2 py-1 text-xs rounded border border-purple-500/50 bg-purple-900/30 text-purple-300 hover:bg-purple-700/50"
                        data-track="bass">Bass</button
                    >
                    <button
                        id="btn-drums"
                        class="track-btn px-2 py-1 text-xs rounded border border-red-500/50 bg-red-900/30 text-red-300 hover:bg-red-700/50"
                        data-track="drums">Drums</button
                    >
                    <button
                        id="btn-vocals"
                        class="track-btn px-2 py-1 text-xs rounded border border-blue-500/50 bg-blue-900/30 text-blue-300 hover:bg-blue-700/50"
                        data-track="vocals">Vocals</button
                    >
                    <button
                        id="btn-other"
                        class="track-btn px-2 py-1 text-xs rounded border border-green-500/50 bg-green-900/30 text-green-300 hover:bg-green-700/50"
                        data-track="other">Other</button
                    >
                </div>
            </div>

            <div class="flex items-center gap-2">
                <label for="volume-slider" class="text-neon-blue text-xs"
                    >Volume:</label
                >
                <input
                    type="range"
                    id="volume-slider"
                    min="0"
                    max="100"
                    value="70"
                    aria-label="Ajustar volumen del audio"
                    class="w-16 h-1 bg-cyber-700 rounded-lg appearance-none cursor-pointer"
                />
            </div>
        </div>
    </div>
</div>

<!-- Audio principal (audible) -->
<audio
    id="audio-main"
    src="/music/demo.mp3"
    preload="metadata"
    crossorigin="anonymous"></audio>

<!-- Audio elements para an√°lisis visual (silenciosos) -->
<audio id="audio-bass" preload="metadata" crossorigin="anonymous"></audio>
<audio id="audio-drums" preload="metadata" crossorigin="anonymous"></audio>
<audio id="audio-vocals" preload="metadata" crossorigin="anonymous"></audio>
<audio id="audio-other" preload="metadata" crossorigin="anonymous"></audio>

<script>
    // @ts-ignore
    import WaveSurfer from "wavesurfer.js";

    interface Track {
        name: string;
        audio: HTMLAudioElement;
        context: AudioContext;
        analyser: AnalyserNode;
        source: MediaElementAudioSourceNode | null;
        dataArray: Uint8Array;
        active: boolean;
        color: string;
        panelSelector: string;
    }

    interface PanelElement {
        element: HTMLElement;
        track: string;
        originalBorderColor: string;
        originalBackgroundColor: string;
        originalBoxShadow: string;
    }

    class MultiTrackAudioVisualizer {
        private tracks: Map<string, Track> = new Map();
        private panels: PanelElement[] = [];

        // üîß Sistema de debug condicional - solo visible en desarrollo
        public debug = {
            log: (message: string, ...args: any[]) => {
                if (import.meta.env.DEV) {
                    console.log(message, ...args);
                }
            },
            warn: (message: string, ...args: any[]) => {
                if (import.meta.env.DEV) {
                    console.warn(message, ...args);
                }
            },
            error: (message: string, ...args: any[]) => {
                // Los errores SIEMPRE se muestran (importante para debugging en producci√≥n)
                console.error(message, ...args);
            },
        };
        private playButton: HTMLButtonElement;
        private volumeSlider: HTMLInputElement;
        private currentTimeElement: HTMLElement;
        private totalTimeElement: HTMLElement;
        private waveSurfer: WaveSurfer | null = null;
        private isPlaying: boolean = false;
        private masterTime: number = 0;
        private rafId: number | null = null;
        private mainAudio: HTMLAudioElement | null = null; // Audio principal audible
        private masterAudio: HTMLAudioElement | null = null; // Audio para sincronizaci√≥n

        constructor() {
            this.playButton = document.getElementById(
                "play-button",
            ) as HTMLButtonElement;
            this.volumeSlider = document.getElementById(
                "volume-slider",
            ) as HTMLInputElement;
            this.currentTimeElement = document.getElementById(
                "current-time",
            ) as HTMLElement;
            this.totalTimeElement = document.getElementById(
                "total-time",
            ) as HTMLElement;

            // Inicializaci√≥n b√°sica inmediata
            this.setupEventListeners();
            this.findPanels();

            // Lazy initialization de recursos pesados
            this.lazyInitializeAudio();
        }

        /**
         * Lazy initialization de recursos de audio para mejorar performance inicial
         * Los recursos pesados se cargan despu√©s del render inicial
         */
        private lazyInitializeAudio() {
            // Usar setTimeout para no bloquear el render inicial
            setTimeout(() => {
                this.debug.log("üöÄ Iniciando lazy loading de audio...");

                // Cargar audio principal
                this.initializeMainAudio();

                // Cargar pistas despu√©s de un delay adicional
                setTimeout(() => {
                    this.initializeTracks();
                }, 100);

                // Cargar WaveSurfer al final
                setTimeout(() => {
                    this.initializeWaveSurfer();
                }, 200);
            }, 50); // Delay m√≠nimo para no bloquear el render
        }

        private initializeMainAudio() {
            // Configurar el audio principal (demo.mp3) que ser√° audible
            this.mainAudio = document.getElementById(
                "audio-main",
            ) as HTMLAudioElement;
            this.mainAudio.volume = 0.7;

            // Este ser√° nuestro audio master para tiempo
            this.masterAudio = this.mainAudio;
        }

        private initializeTracks() {
            const trackConfigs = [
                {
                    name: "bass",
                    file: "/music/bass.mp3",
                    color: "#8B5CF6", // purple
                    panelSelector:
                        '[data-track="bass"], #contact-panel, .contact-panel',
                },
                {
                    name: "drums",
                    file: "/music/drums.mp3",
                    color: "#EF4444", // red
                    panelSelector:
                        '[data-track="drums"], #projects-panel, .projects-panel',
                },
                {
                    name: "vocals",
                    file: "/music/vocals.mp3",
                    color: "#3B82F6", // blue
                    panelSelector:
                        '[data-track="vocals"], #profile-panel, .profile-panel',
                },
                {
                    name: "other",
                    file: "/music/other.mp3",
                    color: "#10B981", // green
                    panelSelector:
                        '[data-track="other"], #code-editor-panel, .code-editor-panel',
                },
            ];

            trackConfigs.forEach(async (config) => {
                const audio = document.getElementById(
                    `audio-${config.name}`,
                ) as HTMLAudioElement;

                if (!audio) {
                    console.error(
                        `‚ùå Audio element no encontrado: audio-${config.name}`,
                    );
                    return;
                }

                this.debug.log(`üéµ Configurando track: ${config.name}`);

                // Configurar el audio
                audio.src = config.file;
                audio.volume = 0.01; // Volumen muy bajo para an√°lisis (casi inaudible)
                audio.crossOrigin = "anonymous";
                audio.preload = "metadata";

                const context = new (window.AudioContext ||
                    (window as any).webkitAudioContext)();
                const analyser = context.createAnalyser();
                analyser.fftSize = 1024;
                analyser.smoothingTimeConstant = 0.8;

                const track: Track = {
                    name: config.name,
                    audio,
                    context,
                    analyser,
                    source: null,
                    dataArray: new Uint8Array(analyser.frequencyBinCount),
                    active: true,
                    color: config.color,
                    panelSelector: config.panelSelector,
                };

                this.tracks.set(config.name, track);

                // Manejar eventos de carga
                audio.addEventListener("loadedmetadata", () => {
                    this.debug.log(`‚úÖ Metadata cargada para ${config.name}`);
                    if (!track.source && track.context.state !== "closed") {
                        try {
                            track.source =
                                track.context.createMediaElementSource(audio);
                            track.source.connect(track.analyser);
                            // NO conectar al destination para que sea silencioso
                            // track.source.connect(track.context.destination);
                            this.debug.log(
                                `üîä Contexto de audio conectado para ${config.name}`,
                            );
                        } catch (error) {
                            console.error(
                                `‚ùå Error conectando audio context para ${config.name}:`,
                                error,
                            );
                        }
                    }
                });

                audio.addEventListener("error", (e) => {
                    console.error(`‚ùå Error cargando audio ${config.name}:`, e);
                });

                audio.addEventListener("canplaythrough", () => {
                    console.log(
                        `üéâ Audio listo para reproducir: ${config.name}`,
                    );
                });
            });
        }

        private initializeWaveSurfer() {
            const container = document.getElementById("waveform-container");
            if (!container) return;

            this.waveSurfer = WaveSurfer.create({
                container: container,
                waveColor: "#06B6D4",
                progressColor: "#0891B2",
                height: 48,
                barWidth: 2,
                barGap: 1,
                normalize: true,
            });

            // Cargar el audio principal (demo.mp3) para la visualizaci√≥n de waveform
            this.waveSurfer.load("/music/demo.mp3");

            this.waveSurfer.on("ready", () => {
                if (this.masterAudio) {
                    const duration = this.masterAudio.duration;
                    this.totalTimeElement.textContent =
                        this.formatTime(duration);
                }
            });
        }

        private setupEventListeners() {
            // Funcionalidad del acorde√≥n
            this.setupAccordion();

            this.playButton.addEventListener("click", () => this.togglePlay());

            // Mini play button en el header del acorde√≥n
            const miniPlayButton = document.getElementById("mini-play-button");
            if (miniPlayButton) {
                miniPlayButton.addEventListener("click", (e) => {
                    e.stopPropagation(); // Evitar que se abra/cierre el acorde√≥n
                    this.togglePlay();
                });
            }

            this.volumeSlider.addEventListener("input", (e) =>
                this.setMainVolume(
                    parseInt((e.target as HTMLInputElement).value),
                ),
            );

            // Botones de activaci√≥n/desactivaci√≥n de tracks (solo para visualizaci√≥n)
            document.querySelectorAll(".track-btn").forEach((btn) => {
                btn.addEventListener("click", (e) => {
                    const trackName = (e.target as HTMLElement).dataset.track;
                    if (trackName) {
                        this.toggleTrackVisualization(trackName);
                    }
                });
            });

            // Sincronizar con el audio principal
            if (this.mainAudio) {
                this.mainAudio.addEventListener("timeupdate", () => {
                    this.masterTime = this.mainAudio!.currentTime;
                    this.currentTimeElement.textContent = this.formatTime(
                        this.masterTime,
                    );

                    // Sincronizar todas las pistas de an√°lisis con el tiempo principal
                    this.tracks.forEach((track) => {
                        if (
                            Math.abs(
                                track.audio.currentTime - this.masterTime,
                            ) > 0.1
                        ) {
                            track.audio.currentTime = this.masterTime;
                        }
                    });

                    if (this.waveSurfer) {
                        this.waveSurfer.setTime(this.masterTime);
                    }
                });

                this.mainAudio.addEventListener("ended", () => {
                    this.stop();
                });
            }
        }

        /**
         * Configura la funcionalidad del acorde√≥n para colapsar/expandir el reproductor
         */
        private setupAccordion() {
            const accordionToggle = document.getElementById("accordion-toggle");
            const accordionContent =
                document.getElementById("accordion-content");
            const chevronIcon = document.getElementById("chevron-icon");
            const audioStatus = document.getElementById("audio-status");

            if (!accordionToggle || !accordionContent || !chevronIcon) {
                this.debug.warn("‚ö†Ô∏è Elementos del acorde√≥n no encontrados");
                return;
            }

            let isExpanded = false;

            accordionToggle.addEventListener("click", () => {
                isExpanded = !isExpanded;

                // Actualizar aria-expanded
                accordionToggle.setAttribute(
                    "aria-expanded",
                    isExpanded.toString(),
                );
                accordionContent.setAttribute(
                    "aria-hidden",
                    (!isExpanded).toString(),
                );

                if (isExpanded) {
                    // Expandir
                    accordionContent.style.maxHeight =
                        accordionContent.scrollHeight + "px";
                    chevronIcon.style.transform = "rotate(180deg)";
                    this.debug.log("üîä Reproductor expandido");
                } else {
                    // Colapsar
                    accordionContent.style.maxHeight = "0";
                    chevronIcon.style.transform = "rotate(0deg)";
                    this.debug.log("üìå Reproductor colapsado");
                }
            });

            // Actualizar estado del audio en el header
            this.updateAudioStatus = (status: string) => {
                if (audioStatus) {
                    audioStatus.textContent = status;
                }
            };
        }

        private updateAudioStatus?: (status: string) => void;

        private findPanels() {
            this.debug.log("üéµ Buscando paneles para efectos visuales...");

            // Buscar paneles por data-track attribute primero
            const trackConfigs = [
                {
                    name: "bass",
                    file:
                        "/music/" +
                        encodeURIComponent(
                            "El Cuarteto de Nos - Enamorado tuyo (LetraLyrics)-bass-C# minor-96bpm-441hz.mp3",
                        ),
                    color: "#8B5CF6",
                    panelSelector: '[data-track="bass"]',
                },
                {
                    name: "drums",
                    file:
                        "/music/" +
                        encodeURIComponent(
                            "El Cuarteto de Nos - Enamorado tuyo (LetraLyrics)-drums-C# minor-96bpm-441hz.mp3",
                        ),
                    color: "#EF4444",
                    panelSelector: '[data-track="drums"]',
                },
                {
                    name: "vocals",
                    file:
                        "/music/" +
                        encodeURIComponent(
                            "El Cuarteto de Nos - Enamorado tuyo (LetraLyrics)-vocals-C# minor-96bpm-441hz.mp3",
                        ),
                    color: "#3B82F6",
                    panelSelector: '[data-track="vocals"]',
                },
                {
                    name: "other",
                    file:
                        "/music/" +
                        encodeURIComponent(
                            "El Cuarteto de Nos - Enamorado tuyo (LetraLyrics)-other-C# minor-96bpm-441hz.mp3",
                        ),
                    color: "#22C55E",
                    panelSelector: '[data-track="other"]',
                },
            ];

            trackConfigs.forEach((config) => {
                const elements = document.querySelectorAll(
                    config.panelSelector,
                );
                elements.forEach((element) => {
                    if (element instanceof HTMLElement) {
                        const style = window.getComputedStyle(element);
                        this.panels.push({
                            element: element,
                            track: config.name,
                            originalBorderColor: style.borderColor,
                            originalBackgroundColor: style.backgroundColor,
                            originalBoxShadow: style.boxShadow,
                        });
                        console.log(
                            `‚úÖ Panel ${config.name} encontrado:`,
                            element,
                        );
                    }
                });
            });

            // Fallback si no encontramos paneles con data-track
            if (this.panels.length === 0) {
                console.log(
                    "‚ö†Ô∏è No se encontraron paneles con data-track, usando fallback...",
                );
                const fallbackPanels = [
                    {
                        selector:
                            '.panel:has([class*="PROFILE"]), .panel:has(h3:contains("PROFILE"))',
                        track: "vocals",
                    },
                    {
                        selector:
                            '.panel:has([class*="CONTACT"]), .panel:has(h3:contains("CONTACT"))',
                        track: "bass",
                    },
                    {
                        selector:
                            '.panel:has([class*="PROJECTS"]), .panel:has(h3:contains("PROJECTS"))',
                        track: "drums",
                    },
                    {
                        selector:
                            '.panel:has([class*="CODE"]), .panel:has(h3:contains("CODE"))',
                        track: "other",
                    },
                ];

                // Si el fallback no funciona, buscar todos los .panel y asignar manualmente
                const allPanels = document.querySelectorAll(".panel");
                console.log(
                    `üîç Encontrados ${allPanels.length} paneles en total`,
                );

                allPanels.forEach((element, index) => {
                    if (element instanceof HTMLElement) {
                        const trackNames = ["vocals", "drums", "other", "bass"];
                        const track = trackNames[index % trackNames.length];
                        const style = window.getComputedStyle(element);
                        this.panels.push({
                            element: element,
                            track: track,
                            originalBorderColor: style.borderColor,
                            originalBackgroundColor: style.backgroundColor,
                            originalBoxShadow: style.boxShadow,
                        });
                        console.log(
                            `üéØ Panel ${index} asignado a ${track}:`,
                            element,
                        );
                    }
                });
            }

            console.log(
                `üéâ Total de paneles configurados: ${this.panels.length}`,
            );
        }

        private togglePlay() {
            if (this.isPlaying) {
                this.pause();
            } else {
                this.play();
            }
        }

        private async play() {
            try {
                this.debug.log("üéµ Iniciando reproducci√≥n...");

                // Reanudar todos los contextos de audio
                for (const track of this.tracks.values()) {
                    if (track.context.state === "suspended") {
                        await track.context.resume();
                        this.debug.log(
                            `üîä Contexto reanudado para ${track.name}`,
                        );
                    }
                }

                // Reproducir el audio principal (audible)
                if (this.mainAudio) {
                    this.mainAudio.currentTime = this.masterTime;
                    await this.mainAudio.play();
                    this.debug.log("üéµ Audio principal reproduciendo");
                }

                // Reproducir todas las pistas de an√°lisis (silenciosas) de forma sincronizada
                const playPromises: Promise<void>[] = [];
                this.debug.log(
                    `üéµ Intentando reproducir ${this.tracks.size} pistas de an√°lisis...`,
                );

                this.tracks.forEach((track) => {
                    this.debug.log(
                        `üîç Pista ${track.name}: active=${track.active}, readyState=${track.audio.readyState}, currentSrc=${track.audio.currentSrc}`,
                    );

                    if (track.active && track.audio.readyState >= 2) {
                        // HAVE_CURRENT_DATA
                        this.debug.log(
                            `‚ñ∂Ô∏è Reproduciendo pista ${track.name}...`,
                        );
                        track.audio.currentTime = this.masterTime;
                        playPromises.push(
                            track.audio
                                .play()
                                .then(() => {
                                    this.debug.log(
                                        `‚úÖ Pista ${track.name} reproduci√©ndose`,
                                    );
                                })
                                .catch((e) => {
                                    this.debug.warn(
                                        `‚ö†Ô∏è No se pudo reproducir ${track.name}:`,
                                        e,
                                    );
                                }),
                        );
                    } else {
                        this.debug.warn(
                            `‚ùå Pista ${track.name} no lista: active=${track.active}, readyState=${track.audio.readyState}`,
                        );
                    }
                });

                await Promise.all(playPromises);

                this.isPlaying = true;
                this.updatePlayButton();
                this.startVisualization();
                this.debug.log("üéâ Reproducci√≥n iniciada exitosamente");

                // Actualizar estado en el header del acorde√≥n
                this.updateAudioStatus?.("Reproduciendo...");
            } catch (error) {
                console.error("‚ùå Error al reproducir:", error);
                this.isPlaying = false;
                this.updatePlayButton();
                this.updateAudioStatus?.("Error al reproducir");
            }
        }

        private pause() {
            this.debug.log("‚è∏Ô∏è Pausando reproducci√≥n...");

            // Pausar audio principal
            if (this.mainAudio) {
                this.mainAudio.pause();
            }

            // Pausar pistas de an√°lisis
            this.tracks.forEach((track) => {
                track.audio.pause();
            });

            this.isPlaying = false;
            this.updatePlayButton();
            this.stopVisualization();

            // Actualizar estado en el header del acorde√≥n
            this.updateAudioStatus?.("Pausado");
        }

        private updatePlayButton() {
            const miniPlayButton = document.getElementById("mini-play-button");

            if (this.isPlaying) {
                // Bot√≥n principal - icono de pausa
                this.playButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        `;
                this.playButton.classList.add("playing");

                // Mini bot√≥n - icono de pausa
                if (miniPlayButton) {
                    miniPlayButton.innerHTML = `
                        <svg class="w-4 h-4 text-neon-blue" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>`;
                }
            } else {
                // Bot√≥n principal - icono de play
                this.playButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
          </svg>
        `;
                this.playButton.classList.remove("playing");

                // Mini bot√≥n - icono de play
                if (miniPlayButton) {
                    miniPlayButton.innerHTML = `
                        <svg class="w-4 h-4 text-neon-blue" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
                        </svg>`;
                }
            }
        }

        private stop() {
            this.pause();
            this.masterTime = 0;

            // Reiniciar audio principal
            if (this.mainAudio) {
                this.mainAudio.currentTime = 0;
            }

            // Reiniciar pistas de an√°lisis
            this.tracks.forEach((track) => {
                track.audio.currentTime = 0;
            });

            if (this.waveSurfer) {
                this.waveSurfer.setTime(0);
            }
        }

        private setMainVolume(volume: number) {
            const normalizedVolume = volume / 100;
            // Solo cambiar el volumen del audio principal
            if (this.mainAudio) {
                this.mainAudio.volume = normalizedVolume;
            }
            // Las pistas de an√°lisis siempre permanecen en silencio
        }

        private toggleTrackVisualization(trackName: string) {
            const track = this.tracks.get(trackName);
            if (!track) return;

            track.active = !track.active;
            const btn = document.getElementById(
                `btn-${trackName}`,
            ) as HTMLButtonElement;

            if (track.active) {
                btn.style.opacity = "1";
                btn.classList.add("active");
                if (this.isPlaying) {
                    track.audio.currentTime = this.masterTime;
                    track.audio.play();
                }
            } else {
                btn.style.opacity = "0.5";
                btn.classList.remove("active");
                track.audio.pause();
            }
        }

        // Usar requestIdleCallback cuando est√© disponible para optimizar rendimiento
        private startVisualization() {
            if (this.rafId) return;

            // Priorizar el renderizado de la UI sobre el an√°lisis de audio
            const visualize = () => {
                if (!this.isPlaying) return;

                // Usar requestIdleCallback si est√° disponible para no bloquear el hilo principal
                if ("requestIdleCallback" in window) {
                    // @ts-ignore - TypeScript no reconoce requestIdleCallback
                    window.requestIdleCallback(
                        () => {
                            this.analyzeAudio();
                        },
                        { timeout: 1000 / 30 },
                    ); // Garantizar que se ejecute al menos 30 veces por segundo
                } else {
                    this.analyzeAudio();
                }

                this.rafId = requestAnimationFrame(visualize);
            };

            visualize();
        }

        // Contador para limitar la frecuencia de an√°lisis
        private analyzeCounter = 0;
        private readonly ANALYZE_THROTTLE = 3; // Solo analizar 1 de cada 3 frames para reducir carga de CPU

        private analyzeAudio() {
            // Limitar la frecuencia de an√°lisis para reducir carga de CPU
            this.analyzeCounter++;
            if (this.analyzeCounter % this.ANALYZE_THROTTLE !== 0) return;

            // Evitar logs excesivos en producci√≥n
            this.debug.log(`üîç Analizando ${this.tracks.size} pistas...`);

            // Usar una cola de microtareas para no bloquear el hilo principal
            // y permitir que la UI se actualice primero
            queueMicrotask(() => {
                this.tracks.forEach((track) => {
                    this.debug.log(
                        `üéµ Pista ${track.name}: active=${track.active}, paused=${track.audio.paused}, source=${!!track.source}`,
                    );

                    if (!track.active || !track.source || track.audio.paused) {
                        this.debug.log(
                            `‚è∏Ô∏è Saltando pista ${track.name} - no activa o pausada`,
                        );
                        return;
                    }

                    try {
                        track.analyser.getByteFrequencyData(track.dataArray);

                        // Verificar si hay datos de audio
                        const sum = track.dataArray.reduce((a, b) => a + b, 0);

                        if (sum === 0) {
                            this.debug.warn(
                                `‚ö†Ô∏è Pista ${track.name} no tiene datos de audio - readyState: ${track.audio.readyState}, currentTime: ${track.audio.currentTime}, duration: ${track.audio.duration}`,
                            );

                            // Reset sutil de efectos cuando no hay datos
                            const relevantPanels = this.panels.filter(
                                (panel) => panel.track === track.name,
                            );
                            relevantPanels.forEach((panel) => {
                                panel.element.style.transform = "scale(1)"; // Volver a tama√±o normal
                                panel.element.style.borderColor =
                                    panel.originalBorderColor;
                                panel.element.style.background = ""; // Limpiar gradiente
                                panel.element.style.boxShadow =
                                    panel.originalBoxShadow;
                                panel.element.style.borderWidth = ""; // Limpiar borde din√°mico
                                panel.element.style.filter = ""; // Limpiar filtros
                            });
                            return;
                        }

                        // Calcular diferentes bandas de frecuencia
                        const dataLength = track.dataArray.length;
                        const bassData = track.dataArray.slice(
                            0,
                            Math.floor(dataLength * 0.1),
                        );
                        const midData = track.dataArray.slice(
                            Math.floor(dataLength * 0.1),
                            Math.floor(dataLength * 0.5),
                        );
                        const trebleData = track.dataArray.slice(
                            Math.floor(dataLength * 0.5),
                        );

                        const bassAvg =
                            bassData.reduce((a, b) => a + b, 0) /
                            bassData.length;
                        const midAvg =
                            midData.reduce((a, b) => a + b, 0) / midData.length;
                        const trebleAvg =
                            trebleData.reduce((a, b) => a + b, 0) /
                            trebleData.length;
                        const totalAvg =
                            track.dataArray.reduce((a, b) => a + b, 0) /
                            track.dataArray.length;

                        // Normalizar valores (0-1) y amplificar para mayor sensibilidad
                        const normalizedBass = Math.min(
                            (bassAvg / 255) * 10,
                            1,
                        ); // 10x amplificaci√≥n
                        const normalizedMid = Math.min((midAvg / 255) * 10, 1);
                        const normalizedTreble = Math.min(
                            (trebleAvg / 255) * 10,
                            1,
                        );
                        const normalizedTotal = Math.min(
                            (totalAvg / 255) * 15,
                            1,
                        ); // 15x amplificaci√≥n para efectos m√°s visibles

                        // Aplicar efectos a paneles espec√≠ficos para esta pista
                        const relevantPanels = this.panels.filter(
                            (panel) => panel.track === track.name,
                        );

                        // Verificar si hay paneles para aplicar efectos
                        if (relevantPanels.length > 0) {
                            this.debug.log(
                                `üé® Aplicando efectos a ${relevantPanels.length} paneles para ${track.name}`,
                            );

                            // Aplicar efectos a cada panel encontrado
                            relevantPanels.forEach((panel) => {
                                // Aplicar efectos visuales basados en las diferentes bandas de frecuencia
                                this.applyTrackEffect(
                                    panel,
                                    track,
                                    normalizedBass,
                                    normalizedMid,
                                    normalizedTreble,
                                    normalizedTotal,
                                );
                            });
                        }
                    } catch (error) {
                        this.debug.warn(
                            `‚ö†Ô∏è Error analizando audio para ${track.name}:`,
                            error,
                        );
                    }
                });
            });
        }

        // M√©todo obsoleto - usar analyzeAudio en su lugar
        private updatePanelsForTrack(track: Track) {
            // Este m√©todo ya no se usa, pero lo mantenemos para compatibilidad
            // Todo el procesamiento se hace ahora en analyzeAudio
            return;
        }

        /**
         * Aplica efectos visuales a un panel basado en los datos de frecuencia de audio
         * @param panel - El panel HTML al que aplicar efectos
         * @param track - La pista de audio asociada
         * @param normalizedBass - Valor normalizado de frecuencias bajas (0-1)
         * @param normalizedMid - Valor normalizado de frecuencias medias (0-1)
         * @param normalizedTreble - Valor normalizado de frecuencias altas (0-1)
         * @param normalizedTotal - Valor normalizado de todas las frecuencias (0-1)
         */
        private applyTrackEffect(
            panel: PanelElement,
            track: Track,
            normalizedBass: number,
            normalizedMid: number,
            normalizedTreble: number,
            normalizedTotal: number,
        ): void {
            // Usar normalizedTotal como intensidad principal para compatibilidad
            const intensity = normalizedTotal;
            const element = panel.element;

            switch (track.name) {
                case "bass":
                    // Pulso INTENSO con onda de color (CONTACT)
                    const bassScale = 1 + intensity * 0.25; // Pulso mucho m√°s grande
                    const bassOpacity = 0.4 + intensity * 0.8; // Opacidad m√°s din√°mica
                    element.style.transform = `scale(${bassScale})`;
                    element.style.borderColor = `rgba(147, 51, 234, ${bassOpacity})`; // P√∫rpura intenso
                    element.style.boxShadow = `
                        0 0 ${intensity * 60}px rgba(147, 51, 234, ${intensity * 0.8}),
                        0 0 ${intensity * 120}px rgba(147, 51, 234, ${intensity * 0.4}),
                        inset 0 0 ${intensity * 40}px rgba(147, 51, 234, ${intensity * 0.3})`; // Triple glow
                    break;

                case "drums":
                    // Pulso r√≠tmico INTENSO (PROJECTS)
                    const drumsScale = 1 + intensity * 0.3; // Pulso muy notable
                    const drumsOpacity = 0.5 + intensity * 0.7;
                    const drumsPulse =
                        Math.sin(Date.now() / 100) * intensity * 0.1; // Pulso adicional
                    element.style.transform = `scale(${drumsScale + drumsPulse})`;
                    element.style.borderColor = `rgba(239, 68, 68, ${drumsOpacity})`; // Rojo intenso
                    element.style.boxShadow = `
                        inset 0 0 ${intensity * 50}px rgba(239, 68, 68, ${intensity * 0.6}),
                        0 0 ${intensity * 80}px rgba(239, 68, 68, ${intensity * 0.5})`; // Doble glow
                    element.style.borderWidth = `${Math.max(2, intensity * 8)}px`; // Borde m√°s grueso
                    break;

                case "vocals":
                    // Onda INTENSA que fluye de izquierda a derecha (PROFILE)
                    const wavePosition = (Date.now() / 800) % 2; // M√°s r√°pido
                    const waveOpacity = intensity * 0.7; // M√°s opaco
                    const vocalsScale = 1 + intensity * 0.15; // Pulso combinado
                    element.style.transform = `scale(${vocalsScale})`;
                    element.style.background = `
                        linear-gradient(90deg, 
                            rgba(59, 130, 246, 0) 0%, 
                            rgba(59, 130, 246, ${waveOpacity}) ${wavePosition * 60}%, 
                            rgba(59, 130, 246, ${waveOpacity * 0.6}) ${wavePosition * 80}%,
                            rgba(59, 130, 246, 0) 100%),
                        linear-gradient(45deg, 
                            rgba(59, 130, 246, ${intensity * 0.1}) 0%, 
                            transparent 50%)`; // Gradiente diagonal adicional
                    element.style.borderColor = `rgba(59, 130, 246, ${0.5 + intensity * 0.6})`;
                    element.style.boxShadow = `0 0 ${intensity * 70}px rgba(59, 130, 246, ${intensity * 0.7})`;
                    break;

                case "other":
                    // Onda INTENSA que fluye de arriba a abajo (MUSIC PROJECTS + CODE EDITOR)
                    const verticalWave = (Date.now() / 1000) % 2; // M√°s r√°pido
                    const verticalOpacity = intensity * 0.6; // M√°s opaco
                    const otherScale = 1 + intensity * 0.2; // Pulso m√°s notable
                    const rotation = Math.sin(Date.now() / 500) * intensity * 3; // Rotaci√≥n sutil
                    element.style.transform = `scale(${otherScale}) rotate(${rotation}deg)`;
                    element.style.background = `
                        linear-gradient(180deg, 
                            rgba(34, 197, 94, 0) 0%, 
                            rgba(34, 197, 94, ${verticalOpacity}) ${verticalWave * 60}%, 
                            rgba(34, 197, 94, ${verticalOpacity * 0.5}) ${verticalWave * 85}%,
                            rgba(34, 197, 94, 0) 100%),
                        linear-gradient(135deg, 
                            rgba(34, 197, 94, ${intensity * 0.1}) 0%, 
                            transparent 60%)`; // Gradiente diagonal
                    element.style.borderColor = `rgba(34, 197, 94, ${0.5 + intensity * 0.5})`;
                    element.style.boxShadow = `
                        0 0 ${intensity * 50}px rgba(34, 197, 94, ${intensity * 0.6}),
                        inset 0 0 ${intensity * 30}px rgba(34, 197, 94, ${intensity * 0.2})`;
                    element.style.filter = `brightness(${1 + intensity * 0.4}) saturate(${1 + intensity * 0.8})`;
                    break;
            }
        }

        private stopVisualization() {
            if (this.rafId) {
                cancelAnimationFrame(this.rafId);
                this.rafId = null;
            }

            // Restaurar estilos originales completamente
            this.panels.forEach((panel) => {
                panel.element.style.borderColor = panel.originalBorderColor;
                panel.element.style.backgroundColor =
                    panel.originalBackgroundColor;
                panel.element.style.boxShadow = panel.originalBoxShadow;
                panel.element.style.transform = "";
                panel.element.style.background = ""; // Limpiar gradientes
                panel.element.style.filter = ""; // Limpiar filtros
                panel.element.style.borderWidth = ""; // Limpiar borde din√°mico
            });
        }

        private formatTime(seconds: number): string {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, "0")}`;
        }

        public getPanelCount(): number {
            return this.panels.length;
        }

        public checkReady(): boolean {
            return this.panels.length > 0 && this.tracks.size > 0;
        }
    }

    // Inicializar cuando la p√°gina est√© lista
    window.addEventListener("DOMContentLoaded", () => {
        setTimeout(() => {
            const visualizer = new MultiTrackAudioVisualizer();
            visualizer.debug.log("üöÄ MultiTrack Audio Visualizer initialized");

            // Auto-iniciar visualizaci√≥n despu√©s de cargar
            setTimeout(() => {
                const panelCount = visualizer.getPanelCount();
                if (panelCount > 0) {
                    console.log(
                        `‚úÖ ${panelCount} paneles detectados y listos para animaci√≥n`,
                    );
                } else {
                    visualizer.debug.warn(
                        "‚ö†Ô∏è No se detectaron paneles para animaci√≥n",
                    );
                }

                // Hacer el visualizador accesible globalmente para debug
                (window as any).audioVisualizer = visualizer;
            }, 2000);
        }, 500);
    });
</script>

<style>
    #audio-controls {
        backdrop-filter: blur(12px);
        border-image: linear-gradient(45deg, #06b6d4, #8b5cf6) 1;
    }

    .track-btn {
        transition: all 0.3s ease;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .track-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .track-btn.active {
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0.7;
        }
    }

    #volume-slider {
        background: linear-gradient(to right, #06b6d4 0%, #8b5cf6 100%);
    }

    #volume-slider::-webkit-slider-thumb {
        appearance: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #06b6d4;
        cursor: pointer;
        box-shadow: 0 0 8px rgba(6, 182, 212, 0.5);
    }

    #volume-slider::-moz-range-thumb {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #06b6d4;
        cursor: pointer;
        border: none;
        box-shadow: 0 0 8px rgba(6, 182, 212, 0.5);
    }

    #waveform-container {
        border: 1px solid rgba(6, 182, 212, 0.3);
        background: linear-gradient(
            45deg,
            rgba(6, 182, 212, 0.1),
            rgba(139, 92, 246, 0.1)
        );
    }

    /* Efectos responsive */
    @media (max-width: 768px) {
        #audio-controls {
            flex-direction: column;
            gap: 2px;
            padding: 2px;
        }

        #waveform-container {
            width: 200px;
            height: 32px;
        }

        .track-btn {
            padding: 4px 8px;
            font-size: 10px;
        }
    }
</style>
